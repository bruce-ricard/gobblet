### URGENT ###

- put size limit on username, password and email size to prevent attacks
- change the get_games from the GAMES to return just a react.event, not extended. Instead of updating the list on each change, rather update it every couple of seconds, it will be better for the UI.
- add a game_db to server_lib_games functor, to which the games will be stored, and add them to postgres DB
- make the react DB faster, by using a hashtable maybe
- If you create a game against someone, it's case sensitive, and doesn't create the
  game against the player you expect. You have to log-in with the correct case sensitivity
  to be able to play.
- Fix caps sensitivity in username. It should be normalized in the DB, but players can
  still login with different cap sensitivity.

### BUGS ###

### --- END URGENT --- ###

### NON URGENT BUGS ###
- Games should store the ratings of the players for display. Currently if you
  load an old game from the archive the `current` ratings of the players will
  be displayed, we probably want to see the ratings from the time the game started
  (or maybe ended).

### FEATURES ###

- Create concepts of "challenge" and "game over"
- Add "rematch" button when game is over
- organize library:
  - don't export all the modules, only the ones needed
  - do we really need gameInProgress? it only adds the player names to game
- https: test https with non test run (port 80)
- make the board have cool colors when you hover over it and it's your turn

### BEFORE BEING ABLE TO PUSH BETA ###

- normal and only X ttt, morris

- Nagios monitoring
- Datadog

- implement timer/chess clock for games

### LONG TERM ###

- chat:
  - have a chat in each game for the players
  - have a general chat on the welcome page

- games:
  - tictactoe:
    - normal
    - only X:
      - normal
      - looser wins
      - 3 boards
    - gobblet
      - junior (3x3, 3 sizes)
      - normal (4x4, 4 sizes)
    - 4 in a row (puissance 4) (connect 4)
  - morris:
    - 3 men
    - 9 men
    - 10 men
    - 12 men
  - checkers:
    - 8x8
    - 10x10
  - hex
  - chess

- performance:
  - make one different react object per browser, so that we don't have to
    send the information to everybody in case a user requests a refresh.

- code:
  - have a library in lib, an intermediate level API/DAO with the types the
    server really needs, and the server calls that. For example, the game library
    should return type unit on move, but the API should return unit Lwt.t on move.
    game_game_by_id should return a game option in the library, but maybe in the API
    we just want to return a game and return an exception if in our usecase we are
    always supposed to check/know that the id exists before we query.